#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ training log issues –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
"""

import os
import sys
import re
import requests
from datetime import datetime

def get_issue_data(issue_number):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ issue –∏–∑ GitHub API"""
    token = os.getenv('GITHUB_TOKEN')
    repo = os.getenv('GITHUB_REPOSITORY')  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è GitHub Actions
    
    headers = {
        'Authorization': f'token {token}',
        'Accept': 'application/vnd.github.v3+json'
    }
    
    url = f'https://api.github.com/repos/{repo}/issues/{issue_number}'
    
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        return response.json()
    else:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è issue: {response.status_code}")
        return None

def parse_training_data(issue_body):
    """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–∑ —Ç–µ–ª–∞ issue"""
    data = {}
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É
    date_match = re.search(r'\*\*–î–∞—Ç–∞:\*\* (\d{4}-\d{2}-\d{2})', issue_body)
    if date_match:
        data['date'] = date_match.group(1)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    time_match = re.search(r'\*\*–í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\*\* (\d{2}:\d{2})', issue_body)
    if time_match:
        data['time'] = time_match.group(1)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    type_match = re.search(r'\*\*–¢–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\*\* (\w+)', issue_body)
    if type_match:
        data['type'] = type_match.group(1)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
    name_match = re.search(r'\*\*–ù–∞–∑–≤–∞–Ω–∏–µ:\*\* (.+)', issue_body)
    if name_match:
        data['name'] = name_match.group(1)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    duration_match = re.search(r'\*\*–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\*\* (.+)', issue_body)
    if duration_match:
        data['duration'] = duration_match.group(1)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞—É–Ω–¥—ã
    rounds_match = re.search(r'\*\*–†–∞—É–Ω–¥—ã/–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:\*\* (.+)', issue_body)
    if rounds_match:
        data['rounds'] = rounds_match.group(1)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Å–∞
    weights_match = re.search(r'\*\*–í–µ—Å–∞:\*\* (.+)', issue_body)
    if weights_match:
        data['weights'] = weights_match.group(1)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–º–µ—Ç–∫–∏
    notes_match = re.search(r'## üìù –ó–∞–º–µ—Ç–∫–∏\n(.+?)(?=\n---|\n$)', issue_body, re.DOTALL)
    if notes_match:
        data['notes'] = notes_match.group(1).strip()
    
    return data

def update_workout_log(training_data):
    """–û–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª workout-log.md"""
    log_file = 'Docs/Health/Fitness/CrossFit/workout-log.md'
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    workout_entry = f"""
### üìÖ {training_data['date']} - {get_day_of_week(training_data['date'])}
**–í—Ä–µ–º—è:** {training_data['time']}  
**–¢–∏–ø:** {training_data['type']}  
**–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:** [1-10]  
**–≠–Ω–µ—Ä–≥–∏—è:** [1-10]  

#### üí™ –û—Å–Ω–æ–≤–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
**WOD:** {training_data['name']}

**–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:**
- **–í—Ä–µ–º—è:** {training_data['duration']}
- **–†–∞—É–Ω–¥—ã:** {training_data['rounds']}
- **–í–µ—Å:** {training_data['weights']}
- **–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å:** [1-10]

#### üìù –ó–∞–º–µ—Ç–∫–∏
{training_data['notes']}

#### ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
**–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ:** `python3 scripts/check_range.py [–∑–Ω–∞—á–µ–Ω–∏—è] [–¥–∏–∞–ø–∞–∑–æ–Ω—ã]`

---
"""
    
    # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
    try:
        with open(log_file, 'r', encoding='utf-8') as f:
            content = f.read()
    except FileNotFoundError:
        print(f"–§–∞–π–ª {log_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ (–ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –ø–µ—Ä–µ–¥ —à–∞–±–ª–æ–Ω–æ–º)
    lines = content.split('\n')
    insert_index = None
    
    for i, line in enumerate(lines):
        if line.startswith('## üéØ –®–∞–±–ª–æ–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏'):
            insert_index = i
            break
    
    if insert_index is None:
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —à–∞–±–ª–æ–Ω, –≤—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        for i, line in enumerate(lines):
            if line.startswith('## üìÖ –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü'):
                insert_index = i + 2
                break
    
    if insert_index is None:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏")
        return False
    
    # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    lines.insert(insert_index, workout_entry)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open(log_file, 'w', encoding='utf-8') as f:
        f.write('\n'.join(lines))
    
    print(f"–û–±–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª {log_file}")
    return True

def update_personal_records(training_data):
    """–û–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª personal-records.md –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ —Ä–µ–∫–æ—Ä–¥—ã"""
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è PR
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ª—É—á—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
    pass

def update_progress_tracking(training_data):
    """–û–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª progress-tracking.md"""
    progress_file = 'Docs/Health/Fitness/CrossFit/progress-tracking.md'
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –º–µ—Å—è—Ü
    pass

def get_day_of_week(date_str):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –ø–æ –¥–∞—Ç–µ"""
    try:
        date_obj = datetime.strptime(date_str, '%Y-%m-%d')
        days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
        return days[date_obj.weekday()]
    except:
        return ''

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python process_training_issue.py <issue_number>")
        sys.exit(1)
    
    issue_number = sys.argv[1]
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ issue
    issue_data = get_issue_data(issue_number)
    if not issue_data:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ issue #{issue_number}")
        sys.exit(1)
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    training_data = parse_training_data(issue_data['body'])
    if not training_data:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
        sys.exit(1)
    
    print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É: {training_data['name']} –æ—Ç {training_data['date']}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
    success = update_workout_log(training_data)
    
    if success:
        print("‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
        sys.exit(1)

if __name__ == '__main__':
    main()
