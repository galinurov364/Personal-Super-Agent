#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —á–µ—Ä–µ–∑ GitHub API
"""

import os
import requests
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

GITHUB_TOKEN = os.getenv('GITHUB_TOKEN')

def create_repository():
    """–°–æ–∑–¥–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞ GitHub"""
    headers = {
        'Authorization': f'token {GITHUB_TOKEN}',
        'Accept': 'application/vnd.github.v3+json'
    }
    
    data = {
        'name': 'Personal-Super-Agent',
        'description': 'Personal workspace for health tracking, learning, and AI projects',
        'private': False,  # –ü—É–±–ª–∏—á–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        'auto_init': False,  # –ù–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å README (—É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å —Ñ–∞–π–ª—ã)
        'gitignore_template': 'Python',  # –î–æ–±–∞–≤–∏—Ç—å .gitignore –¥–ª—è Python
        'license_template': 'mit'  # MIT –ª–∏—Ü–µ–Ω–∑–∏—è
    }
    
    url = 'https://api.github.com/user/repos'
    
    try:
        response = requests.post(url, headers=headers, json=data)
        
        if response.status_code == 201:
            repo_info = response.json()
            print(f"‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {repo_info['full_name']}")
            print(f"   URL: {repo_info['html_url']}")
            print(f"   SSH: {repo_info['ssh_url']}")
            print(f"   HTTPS: {repo_info['clone_url']}")
            return repo_info
        elif response.status_code == 422:
            print("‚ö†Ô∏è –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
            return get_existing_repo()
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        return None

def get_existing_repo():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏"""
    headers = {
        'Authorization': f'token {GITHUB_TOKEN}',
        'Accept': 'application/vnd.github.v3+json'
    }
    
    url = 'https://api.github.com/repos/galinurov364/Personal-Super-Agent'
    
    try:
        response = requests.get(url, headers=headers)
        
        if response.status_code == 200:
            repo_info = response.json()
            print(f"‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞–π–¥–µ–Ω:")
            print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {repo_info['full_name']}")
            print(f"   URL: {repo_info['html_url']}")
            return repo_info
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if not GITHUB_TOKEN:
        print("‚ùå GITHUB_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return
    
    print("üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è Personal-Super-Agent...")
    print("=" * 50)
    
    repo_info = create_repository()
    
    if repo_info:
        print("\n" + "=" * 50)
        print("üéâ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≥–æ—Ç–æ–≤!")
        print(f"üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print(f"1. –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–¥: git push -u origin main")
        print(f"2. –°–æ–∑–¥–∞—Ç—å –º–µ—Ç–∫–∏: python3 create_labels.py")
        print(f"3. –í–∫–ª—é—á–∏—Ç—å GitHub Actions –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")

if __name__ == '__main__':
    main()
