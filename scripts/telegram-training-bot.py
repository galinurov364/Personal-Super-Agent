#!/usr/bin/env python3
"""
Telegram Bot –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö –≤ GitHub Issues
"""

import os
import json
import requests
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
GITHUB_TOKEN = os.getenv('GITHUB_TOKEN')
GITHUB_REPO = os.getenv('GITHUB_REPO')  # format: "username/repository"
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')

class TrainingBot:
    def __init__(self):
        self.github_headers = {
            'Authorization': f'token {GITHUB_TOKEN}',
            'Accept': 'application/vnd.github.v3+json'
        }
        self.github_api_url = f'https://api.github.com/repos/{GITHUB_REPO}/issues'
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = """
üèãÔ∏è‚Äç‚ôÇÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Training Log Bot!

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø—Ä—è–º–æ –≤ GitHub Issues.

üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
/log - –ó–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
/status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞

üéØ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /log –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
2. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞
3. –í–∞—à–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ GitHub Issues
        """
        await update.message.reply_text(welcome_text)
    
    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

üîπ /log - –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å –Ω–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
   –ë–æ—Ç –∑–∞–¥–∞—Å—Ç –≤–∞–º –≤–æ–ø—Ä–æ—Å—ã –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ

üîπ –§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ:
   - –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
   - –¢–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (WOD, –°–∏–ª–æ–≤–∞—è, –ö–∞—Ä–¥–∏–æ)
   - –ù–∞–∑–≤–∞–Ω–∏–µ WOD (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
   - –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤/–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
   - –í–µ—Å–∞ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
   - –ó–∞–º–µ—Ç–∫–∏ –∏ –æ—â—É—â–µ–Ω–∏—è

üîπ –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
   1. /log
   2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
   3. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ
   4. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ

üîπ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ GitHub Issues —Å –º–µ—Ç–∫–∞–º–∏:
   - training-log
   - crossfit
   - [—Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏]
        """
        await update.message.reply_text(help_text)
    
    async def log_training(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
        keyboard = [
            [InlineKeyboardButton("üèãÔ∏è‚Äç‚ôÇÔ∏è WOD", callback_data="type_wod")],
            [InlineKeyboardButton("üí™ –°–∏–ª–æ–≤–∞—è", callback_data="type_strength")],
            [InlineKeyboardButton("üèÉ‚Äç‚ôÇÔ∏è –ö–∞—Ä–¥–∏–æ", callback_data="type_cardio")],
            [InlineKeyboardButton("üéØ –°–º–µ—à–∞–Ω–Ω–∞—è", callback_data="type_mixed")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:",
            reply_markup=reply_markup
        )
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data.startswith("type_"):
            training_type = query.data.replace("type_", "")
            context.user_data['training_type'] = training_type
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
            await self.ask_training_name(query, context)
        
        elif query.data == "confirm_save":
            await self.save_to_github(update, context)
        
        elif query.data == "confirm_cancel":
            await self.cancel_training(update, context)
    
    async def ask_training_name(self, query, context):
        """–°–ø—Ä–æ—Å–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
        training_type = context.user_data['training_type']
        
        if training_type == 'wod':
            await query.edit_message_text(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ WOD (–Ω–∞–ø—Ä–∏–º–µ—Ä: Cindy, Fran, Murph):\n"
                "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 'skip' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
            )
        else:
            await query.edit_message_text(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: Back Squat 5x5):\n"
                "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 'skip' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
            )
        
        context.user_data['awaiting'] = 'training_name'
    
    async def handle_text_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if 'awaiting' not in context.user_data:
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /log –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"
            )
            return
        
        awaiting = context.user_data['awaiting']
        text = update.message.text
        
        if awaiting == 'training_name':
            if text.lower() == 'skip':
                context.user_data['training_name'] = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
            else:
                context.user_data['training_name'] = text
            
            await self.ask_duration(update, context)
        
        elif awaiting == 'duration':
            if text.lower() == 'skip':
                context.user_data['duration'] = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
            else:
                context.user_data['duration'] = text
            
            await self.ask_rounds(update, context)
        
        elif awaiting == 'rounds':
            if text.lower() == 'skip':
                context.user_data['rounds'] = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
            else:
                context.user_data['rounds'] = text
            
            await self.ask_weights(update, context)
        
        elif awaiting == 'weights':
            if text.lower() == 'skip':
                context.user_data['weights'] = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
            else:
                context.user_data['weights'] = text
            
            await self.ask_notes(update, context)
        
        elif awaiting == 'notes':
            if text.lower() == 'skip':
                context.user_data['notes'] = '–ù–µ—Ç –∑–∞–º–µ—Ç–æ–∫'
            else:
                context.user_data['notes'] = text
            
            await self.confirm_training(update, context)
    
    async def ask_duration(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–ø—Ä–æ—Å–∏—Ç—å –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15:30, 20:00):\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 'skip' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
        )
        context.user_data['awaiting'] = 'duration'
    
    async def ask_rounds(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–ø—Ä–æ—Å–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤/–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π"""
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π:\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 'skip' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
        )
        context.user_data['awaiting'] = 'rounds'
    
    async def ask_weights(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–ø—Ä–æ—Å–∏—Ç—å –≤–µ—Å–∞"""
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –≤–µ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100–∫–≥, 95/65 lbs):\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 'skip' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
        )
        context.user_data['awaiting'] = 'weights'
    
    async def ask_notes(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–ø—Ä–æ—Å–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏"""
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –∑–∞–º–µ—Ç–∫–∏ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ (–æ—â—É—â–µ–Ω–∏—è, —É–ª—É—á—à–µ–Ω–∏—è, –ø—Ä–æ–±–ª–µ–º—ã):\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 'skip' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
        )
        context.user_data['awaiting'] = 'notes'
    
    async def confirm_training(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
        training_data = context.user_data
        
        summary = f"""
üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:

üèãÔ∏è‚Äç‚ôÇÔ∏è –¢–∏–ø: {training_data['training_type']}
üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {training_data['training_name']}
‚è±Ô∏è –í—Ä–µ–º—è: {training_data['duration']}
üîÑ –†–∞—É–Ω–¥—ã: {training_data['rounds']}
üèãÔ∏è –í–µ—Å–∞: {training_data['weights']}
üìù –ó–∞–º–µ—Ç–∫–∏: {training_data['notes']}

–í—Å–µ –≤–µ—Ä–Ω–æ?
        """
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="confirm_save")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_cancel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(summary, reply_markup=reply_markup)
    
    async def save_to_github(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ GitHub Issues"""
        query = update.callback_query
        training_data = context.user_data
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ issue
        current_date = datetime.now().strftime("%Y-%m-%d")
        title = f"Training Log - {current_date} - {training_data['training_name']}"
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–ª–æ issue
        body = f"""
# üèãÔ∏è‚Äç‚ôÇÔ∏è Training Log Entry

## üìÖ –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
- **–î–∞—Ç–∞:** {current_date}
- **–í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:** {datetime.now().strftime("%H:%M")}
- **–¢–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:** {training_data['training_type']}
- **–ù–∞–∑–≤–∞–Ω–∏–µ:** {training_data['training_name']}

## üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
- **–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** {training_data['duration']}
- **–†–∞—É–Ω–¥—ã/–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:** {training_data['rounds']}
- **–í–µ—Å–∞:** {training_data['weights']}

## üìù –ó–∞–º–µ—Ç–∫–∏
{training_data['notes']}

---
*–ó–∞–ø–∏—Å–∞–Ω–æ —á–µ—Ä–µ–∑ Telegram Bot*
        """
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç–∫–∏
        labels = ['training-log', 'crossfit', training_data['training_type']]
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è GitHub API
        issue_data = {
            'title': title,
            'body': body,
            'labels': labels
        }
        
        try:
            response = requests.post(
                self.github_api_url,
                headers=self.github_headers,
                json=issue_data
            )
            
            if response.status_code == 201:
                issue_url = response.json()['html_url']
                await query.edit_message_text(
                    f"‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n"
                    f"üîó –°—Å—ã–ª–∫–∞: {issue_url}\n\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /log –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–ª–µ–¥—É—é—â–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"
                )
            else:
                await query.edit_message_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {response.status_code}\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
                )
                
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"
            )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data.clear()
    
    async def cancel_training(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
        query = update.callback_query
        context.user_data.clear()
        
        await query.edit_message_text(
            "‚ùå –ó–∞–ø–∏—Å—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /log –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏"
        )
    
    async def status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
        try:
            response = requests.get(
                f'https://api.github.com/repos/{GITHUB_REPO}',
                headers=self.github_headers
            )
            
            if response.status_code == 200:
                repo_info = response.json()
                status_text = f"""
ü§ñ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:

‚úÖ GitHub —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: –†–∞–±–æ—Ç–∞–µ—Ç
üìÅ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {repo_info['full_name']}
üîó URL: {repo_info['html_url']}
üìä Issues: {repo_info['open_issues_count']}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /log –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
                """
            else:
                status_text = f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å GitHub: {response.status_code}"
                
        except Exception as e:
            status_text = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        
        await update.message.reply_text(status_text)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if not all([GITHUB_TOKEN, GITHUB_REPO, TELEGRAM_TOKEN]):
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: GITHUB_TOKEN, GITHUB_REPO, TELEGRAM_TOKEN")
        return
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot = TrainingBot()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CommandHandler("help", bot.help))
    application.add_handler(CommandHandler("log", bot.log_training))
    application.add_handler(CommandHandler("status", bot.status))
    application.add_handler(CallbackQueryHandler(bot.button_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_text_input))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("ü§ñ Training Bot –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    main()
